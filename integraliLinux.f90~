!*************************************************
!*                                               *
!*  PROGRAMMA FORTRAN CALCOLO INTEGRALE 1/1+X^2  *
!*                                               *
!*                                               *
!*************************************************




PROGRAM INTEGRALE
IMPLICIT NONE
REAL(KIND(0.D0)),PARAMETER :: PI4=ACOS(SQRT(2.D0)/2.D0)
REAL :: CASU,ERRORE=0.D0,SUMMA1=0.D0,FUFFA,ARRERO
REAL*8 :: SUMMA=0.D0,SUMMAQ=0.D0,PREC,SUM_VECT,FIN_VECT
INTEGER :: I=0,CON=0,SCELTA=0
!per vettori Mancini  (:,:,:) un due punti ogni dimensione della matrice/vettore
REAL(KIND(0.D0)), ALLOCATABLE :: CASU_VECT(:),FUN_VECT(:)
INTEGER SUBSET_M ! Numero di elemnti nei sottoinsiemi

1 call system('clear')
call system('bash')
CON=0
SUMMA=0.D0
ERRORE=0.D0
SUMMA1=0.D0
CASU=0.D0
WRITE (*,"(A)")		" /**********************************************************************************************\"
WRITE (*,"(A)")		" |											        |"
WRITE (*,"(A)")		" | 	Mono-Integral Calculator v0.02-beta, di Daniele Scarinci    \o/ \o/ \o/                 |"
WRITE (*,"(A)")		" | 	                                                                                        |"
WRITE (*,"(A)")		" | Inserire: 1-> Versione grafica 2-> Versione normale 3-> Versione veloce 4-> Cerca precisione |"
WRITE (*,"(A)") 	" |           5-> Vers. vettoriale 6-> Vers. con subset                                          |"
WRITE (*,"(A)")		" |											        |"
WRITE (*,"(A)") 	" | 			        Premere 0 per uscire.                                           |"
WRITE (*,"(A)")		" |											        |"
WRITE (*,"(A)")		" \**********************************************************************************************/"

! Sceglie in quale modalità eseguire il programma, se con fronzoli grafici o solo per velocità
WRITE (*,"(A)")
WRITE (*,"(A)",ADVANCE="NO") "Scelta: "
10 READ (*,*,ERR=10) SCELTA

! Modalità grafica, con primtiva barra di caricamento e ciamata di sistema per pulire lo schermo
! Sostituire call system('clear') con call system('cls') se si opera in sistemi windows

IF (SCELTA.EQ.1) THEN
SUMMA1=0.D0
CON=0
WRITE (*,"(A)",ADVANCE="NO") "Inserire numero di iterazioni: "
DO WHILE(CON.LE.0)
11 READ (*,*,ERR=11) CON
END DO


DO I=1,CON

CALL RANDOM_NUMBER(CASU)
SUMMA=SUMMA+(1/(1+CASU**2))
SUMMA1=SUMMA/I
ERRORE=((PI4-SUMMA1)/PI4)*100
WRITE (*,*) "N.Conteggi:", I, "Errore:", ABS(ERRORE),"%"
IF (I.LE.(CON/10)) THEN
WRITE (*,*) "<---------->"
ELSE IF (I.LE.(2*CON/10)) THEN
WRITE (*,*) "<=--------->"
ELSE IF (I.LE.(3*CON/10)) THEN
WRITE (*,*) "<==-------->"
ELSE IF (I.LE.(4*CON/10)) THEN
WRITE (*,*) "<===------->"
ELSE IF (I.LE.(5*CON/10)) THEN
WRITE (*,*) "<====------>"
ELSE IF (I.LE.(6*CON/10)) THEN
WRITE (*,*) "<=====----->"
ELSE IF (I.LE.(7*CON/10)) THEN
WRITE (*,*) "<======---->"
ELSE IF (I.LE.(8*CON/10)) THEN
WRITE (*,*) "<=======--->"
ELSE IF (I.LE.(9*CON/10)) THEN
WRITE (*,*) "<========-->"
ELSE IF (I.LE.(10*CON/10)) THEN
WRITE (*,*) "<=========->"
ELSE 
WRITE (*,*) "<==========>"
END IF

call system('clear')




END DO

SUMMA=SUMMA/CON

WRITE (*,*) 
WRITE (*,*) 
WRITE (*,*) "Iterazioni: ", CON
WRITE (*,*) "Valore reale: ", PI4
WRITE (*,*) "Valore trovato: ", SUMMA
WRITE (*,*) "Errore :", ABS(PI4-SUMMA)
WRITE (*,*) "Errore Percentuale: ", ABS(ERRORE),"%"
WRITE (*,*)
WRITE (*,*) "Premere Invio per continuare"
READ (*,*)
GOTO 1

! Modalità ibrida, stampa qualcosa a schermo

ELSE IF (SCELTA.EQ.2) THEN
SUMMA1=0.D0
CON=0
WRITE (*,"(A)",ADVANCE="NO") "Inserire numero di iterazioni: "

DO WHILE(CON.LE.0)
12 READ (*,*, ERR=12) CON
END DO


DO I=1,CON

CALL RANDOM_NUMBER(CASU)
SUMMA=SUMMA+(1/(1+CASU**2))
SUMMA1=SUMMA/I
ERRORE=((PI4-SUMMA1)/PI4)*100
WRITE (*,*) "N.Conteggi: ", I, "Errore: ", ABS(ERRORE),"%"

END DO

SUMMA=SUMMA/CON

WRITE (*,*) 
WRITE (*,*) 
WRITE (*,*) "Iterazioni: ", CON
WRITE (*,*) "Valore reale: ", PI4
WRITE (*,*) "Valore trovato: ", SUMMA
WRITE (*,*) "Errore: ", ABS(PI4-SUMMA)
WRITE (*,*) "Errore Percentuale: ",ABS(ERRORE),"%"
WRITE (*,*)
WRITE (*,*) "Premere Invio per continuare"
READ (*,*)
GOTO 1

! Modalità senza fronzoli, stampa il risultato senza informazione riguardanti il procedimento utilizzato

ELSE IF (SCELTA.EQ.3) THEN
CON=0
WRITE (*,"(A)",ADVANCE="NO") "Inserire numero di iterazioni: "

DO WHILE(CON.LE.0)
13 READ (*,*,ERR=13) CON
END DO


DO I=1,CON

CALL RANDOM_NUMBER(CASU)
SUMMA=SUMMA+(1/(1+CASU**2))


END DO

SUMMA=SUMMA/CON

WRITE (*,*) 
WRITE (*,*) 
WRITE (*,*) "Iterazioni: ", CON
WRITE (*,*) "Valore reale: ", PI4
WRITE (*,*) "Valore trovato: ", SUMMA
WRITE (*,*) "Errore: ", ABS(PI4-SUMMA)
WRITE (*,*) "Errore Percentuale: ", ABS(((PI4-SUMMA)/PI4)*100),"%"
WRITE (*,*)
WRITE (*,*) "Premere Invio per continuare"
READ (*,*)
GOTO 1

! Uscita dal programma

ELSE IF (SCELTA.EQ.0) THEN
CON=0
GOTO 2


! Metodo per trovare quante iterazioni servono per determinare una determinata precisione di delta

ELSE IF (SCELTA.EQ.4) THEN
PREC=0.D0
SUMMA1=0.D0
SUMMAQ=0.D0
CON=0
I=0

14 WRITE (*,"(A)",ADVANCE="NO") "Inserire precisione ricercata: "

DO WHILE(PREC.LE.0)
	READ (*,*,ERR=14) PREC
END DO

PREC=ABS(PREC)

15 WRITE (*,"(A)",ADVANCE="NO") "Inserire numero di iterazioni massime da realizzare: "

DO WHILE(CON.LE.0)
	READ (*,*,ERR=15) CON
END DO

DO I=2,CON

CALL RANDOM_NUMBER(CASU)
FUFFA=(1.D0/(1.D0+CASU**2))
SUMMA=SUMMA+FUFFA
SUMMAQ=SUMMAQ+FUFFA**2.D0
ERRORE=(SQRT(ABS((SUMMAQ/I-(SUMMA/I)**2.D0))))/SQRT(REAL(I))
WRITE (*,*) "N.Conteggi: ", I, "Errore: ", ABS(ERRORE)
IF (ERRORE.LE.PREC.AND.I.GE.100) EXIT


END DO

SUMMA=SUMMA/I

WRITE (*,*) 
WRITE (*,*) 
WRITE (*,*) "Iterazioni effetuate: ", I
WRITE (*,*) "Valore reale: ", PI4
WRITE (*,*) "Valore trovato: ", SUMMA
WRITE (*,*) "Errore: ", PI4-SUMMA
WRITE (*,*) "Delta voluta: ", PREC
WRITE (*,*) "Delta: ", ABS(ERRORE)
WRITE (*,*)
WRITE (*,*) "Premere Invio per continuare"
READ (*,*)
GOTO 1

!* Nuovo Metodo Mancini con Vettori e Matrici

ELSE IF (SCELTA.EQ.5) THEN

PREC=0.D0
SUMMA=0.D0
SUMMA1=0.D0
SUMMAQ=0.D0
CON=0
I=0

16 WRITE (*,"(A)",ADVANCE="NO") "Inserire precisione ricercata (attualmente inutile): "

DO WHILE(PREC.LE.0)
	READ (*,*,ERR=14) PREC
END DO

PREC=ABS(PREC)

17 WRITE (*,"(A)",ADVANCE="NO") "Inserire numero di iterazioni massime da realizzare: "

DO WHILE(CON.LE.0)
	READ (*,*,ERR=15) CON
END DO

ALLOCATE (CASU_VECT(CON),FUN_VECT(CON))
! Un numero a caso su tutti gli elementi (prima per "indici" intendevo "vettori", solo che non mi ricordavo)
CALL RANDOM_NUMBER(CASU_VECT)
FUN_VECT=1.D0/(1.D0+CASU_VECT*CASU_VECT)
! SUM somma tutti gli elementi del vettore
SUMMA=SUM(FUN_VECT)/CON
FUN_VECT=FUN_VECT**2.D0
FUN_VECT=FUN_VECT/CON
ERRORE=SQRT(ABS((SUM(FUN_VECT)-SUMMA**2.D0))/CON)



!DO I=2,CON
!
!CALL RANDOM_NUMBER(CASU)
!FUFFA=(1.D0/(1.D0+CASU**2))
!SUMMA=SUMMA+FUFFA
!SUMMAQ=SUMMAQ+FUFFA**2.D0
!ERRORE=(SQRT(ABS((SUMMAQ/I-(SUMMA/I)**2.D0))))/SQRT(REAL(I))
!WRITE (*,*) "N.Conteggi: ", I, "Errore: ", ABS(ERRORE)
!IF (ERRORE.LE.PREC.AND.I.GE.100) EXIT
!END DO

!SUMMA=SUMMA/I

WRITE (*,*) 
WRITE (*,*) 
WRITE (*,*) 
WRITE (*,*) "Valore reale: ", PI4
WRITE (*,*) "Valore trovato: ", SUMMA
WRITE (*,*) "Errore: ", ABS(PI4-SUMMA)
WRITE (*,*) "Iterazioni: ", CON
WRITE (*,*) "Delta: ", ABS(ERRORE)
WRITE (*,*)
WRITE (*,*) "Premere Invio per continuare"
READ (*,*)
GOTO 1





!* Metodo substes

ELSE IF (SCELTA.EQ.6) THEN

PREC=0.D0
SUMMA=0.D0
SUMMA1=0.D0
SUMMAQ=0.D0
CON=0
I=0

18 WRITE (*,"(A)",ADVANCE="NO") "Inserire precisione ricercata (attualmente inutile): "

DO WHILE(PREC.LE.0)
	READ (*,*,ERR=14) PREC
END DO

PREC=ABS(PREC)

19 WRITE (*,"(A)",ADVANCE="NO") "Inserire numero di iterazioni massime da realizzare: "

DO WHILE(CON.LE.0)
	READ (*,*,ERR=15) CON
END DO

! Divido le iterazioni in 10 subest, di cui faccio le medie e poi medio tutto insieme, perché dovrebbe dare maggior precisione
SUBSET_M=CON/10
ALLOCATE (CASU_VECT(SUBSET_M),FUN_VECT(SUBSET_M))
SUM_VECT=0.D0
FUN_VECT=0.D0

! Per ogni subset facciamo media e media quadrata, poi facciamo la media dividendo per il numero di subest, come mostrato nella teoria
DO I=1,10

	! Un numero a caso su tutti gli elementi (prima per "indici" intendevo "vettori", solo che non mi ricordavo)
	CALL RANDOM_NUMBER(CASU_VECT)
	SUM_VECT=SUM_VECT+SUM(1.D0/(1.D0+CASU_VECT*CASU_VECT))/SUBSET_M
	FIN_VECT=FIN_VECT+SUM((1.D0/(1.D0+CASU_VECT*CASU_VECT))**2.D0)/SUBSET_M
	
END DO

SUMMA=SUM_VECT/10
FIN_VECT=FIN_VECT/10
ERRORE=SQRT(ABS((FIN_VECT-SUMMA**2.D0))/CON)



!DO I=2,CON
!
!CALL RANDOM_NUMBER(CASU)
!FUFFA=(1.D0/(1.D0+CASU**2))
!SUMMA=SUMMA+FUFFA
!SUMMAQ=SUMMAQ+FUFFA**2.D0
!ERRORE=(SQRT(ABS((SUMMAQ/I-(SUMMA/I)**2.D0))))/SQRT(REAL(I))
!WRITE (*,*) "N.Conteggi: ", I, "Errore: ", ABS(ERRORE)
!IF (ERRORE.LE.PREC.AND.I.GE.100) EXIT
!END DO

!SUMMA=SUMMA/I

WRITE (*,*) 
WRITE (*,*) 
WRITE (*,*) 
WRITE (*,*) "Valore reale: ", PI4
WRITE (*,*) "Valore trovato: ", SUMMA
WRITE (*,*) "Errore: ", ABS(PI4-SUMMA)
WRITE (*,*) "Iterazioni: ", CON
WRITE (*,*) "Delta: ", ABS(ERRORE)
WRITE (*,*)
WRITE (*,*) "Premere Invio per continuare"
READ (*,*)
GOTO 1




!* Metti caso che qualcosa vada male succede questo

ELSE

GOTO 10

END IF

2 WRITE(*,*)

call system('clear')
END PROGRAM
